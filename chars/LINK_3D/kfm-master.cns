; Fichier des constantes et des states de KFM.
; Il y a des commentaires placés dans ce fichier, auxquels vous pourrez
; jeter un oeil si vous souhaitez en apprendre un peu plus sur le cns.

; Note de Mike Werewolf :
; Spécialement pour KFM-Master, j'ai traduit l'intégralité de ces commentaires
; en français, en plus de ceux que j'ai écrits pour les states -2 que j'ai
; rajoutés et les nouveaux mouvements codés dans le newmoves-master.cns.

; 504/2818 lignes traduites pour l'instant.

[Data]
;Niveau de départ de la vie
life = 1000
;Puissance d'attaque (plus il est élevé, plus il est important)
attack = 100
;Puissance de défense (plus il est élevé, plus il est important)
defence = 100
fall.defence_up = 50
;Temps durant lequel le joueur reste au sol avant de se relever
liedown.time = 60
;Nombre de points de juggling
airjuggle = 15
;Animation de hit spark par défaut pour les HitDefs
sparkno = 2
;Animation de guard spark par défaut
guard.sparkno = 40
;1 pour créer un écho sur le KO
KO.echo = 0
;Niveau du volume (négatif = plus faible)
volume = 0
; Les variables ayant un index identique ou supérieur n'auront pas
; leurs valeurs remises à 0 entre deux rounds ou matchs. Il y a 60
; variables entières, indexées de 0 à 59, et 40 variables flottantes,
; indexées de 0 à 39.
; Si omis, les valeurs par défaut sont de 60 et 40 pour les variables
; entières et flottantes, respectivement, signifiant qu'aucune
; variable ne garde sa valeur, c'est à dire qu'elles sont toutes
; réinitialisées. Si vous voulez que vos variables persistent entre
; les matchs, vous devrez réécrire le state 5900 du common1.cns.
IntPersistIndex = 60
FloatPersistIndex = 40

[Size]
xscale = 0.58          ;Facteur de mise à l'échelle horizontale.
yscale = 0.68         ;Facteur de mise à l'échelle verticale.
ground.back = 15     ;Largeur du joueur (dos, sol)
ground.front = 16    ;Largeur du joueur (devant, sol)
air.back = 12        ;Largeur du joueur (dos, air)
air.front = 12       ;Largeur du joueur (devant, air)
height = 60	     ;Hauteur du joueur (pour que l'adversaire saute au-dessus)
attack.dist = 160    ;Distance d'attaque par défaut
proj.attack.dist = 90;Distance d'attaque par défaut pour les projectiles
proj.doscale = 0     ;Mettez 1 pour que les projectiles soient aussi mis à l'échelle
head.pos = -5, -90   ;Position approximative de la tête
mid.pos = -5, -60    ;Position approximative de la ceinture
shadowoffset = 0     ;Nombre de pixels que l'ombre doit verticalement être décalée
draw.offset = 0,0    ;Décalage de l'affichage du joueur en pixeks (x, y)

[Velocity]
walk.fwd  = 3.4      ;Marche avant
walk.back = -3.2     ;Marche arrière
jump.neu = 0,-8.4    ;Vitesse de saut sur place (x, y)
jump.back = -2.55    ;Vitesse de saut arrière (x, y)
jump.fwd = 2.5       ;Vitesse de saut avant (x, y)
runjump.back = -2.55,-8.1 ;Vitesses du saut en course (opt)
runjump.fwd = 4,-8.1      ;.
airjump.neu = 0,-8.1      ;.
airjump.back = -2.55      ;Vitesse des Air jump (opt)
airjump.fwd = 2.5         ;.

[Movement]
airjump.num = 1      ;Nombre d'air jumps autorisés (opt)
airjump.height = 35  ;Distance minimum du sol pour faire un air jump (opt)
yaccel = .44         ;Accélération verticale
stand.friction = .85 ;Coefficient de friction debout
crouch.friction = .82;Coefficient de friction accroupi

;---------------------------------------------------------------------------
; Format:
; [Statedef STATENO]
; type = ?      S/C/A/L  debout/accroupi/air/gisant au sol (liedown)
; movetype = ?  I/A/H    inoccupé/attaque/touché
; physics = ?   S/C/A/N  debout/accroupi/air/aucun
; juggle = ?             points de juggle requis pour le mouvement
;
; [State STATENO, ?]     ? - n'importe quel chiffre de votre choix
; type = ?
; ...

;---------------------------------------------------------------------------
; Défaite par Time Over
; Difficulté CNS : basique
[Statedef 170]
type = S
ctrl = 0
anim = 170
velset = 0,0

[State 170, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Sélection du state de Win
; Difficulté CNS : basique
[Statedef 180]
type = S

[State 180, 1]
type = ChangeState
trigger1 = Time = 0
value = 181

;---------------------------------------------------------------------------
; Win pose 1 - Salut
; Difficulté CNS : basique
[Statedef 181]
type = S
ctrl = 0
anim = 181
velset = 0,0

[State 181, 1]
type = NotHitBy
trigger1 = 1
value = SCA
time = 1

;---------------------------------------------------------------------------
; Introduction

;---------------------------------------------------------------------------
; Taunt (moquerie, provocation)
; Difficulté CNS : facile
[Statedef 195]
type = S
ctrl = 0
anim = 195
velset = 0,0
movetype = I
physics = S
sprpriority = 2

[State 195, 1]
type = CtrlSet
trigger1 = Time = 40
value = 1

[State 195, 2]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;---------------------------------------------------------------------------
; Petit poing debout
; Difficulté CNS : facile
[Statedef 200]
type    = S                      ;State-type: S-debout, C-accroupi, A-air, L-liedown
movetype= A                      ;Move-type: A-Attaque, I-Inoccupé, H-Touché
physics = S                      ;Physics: S-Debout, C-Accroupi, A-air
juggle  = 1                      ;Nombre de points de juggle requis pour ce mouvement
;Commonly-used controllers:
velset = 0,0                     ;Règle les vitesse (x,y) (Def: inchangé)
ctrl = 0                         ;Règle le ctrl (Def: inchangé)
anim = 200                       ;Change l'animation (Def: pas de changement)
poweradd = 20                    ;Power à ajouter (Def: 0)
sprpriority = 2                  ;Règle la priorité d'affichage des sprites à 2 (devant)

[State 200, 1]
type = HitDef
trigger1 = time = 0
attr = S, NA                     ;Attribut : Debout (S), Normale (N) Attaque (A)
damage = 23, 0                   ;Dégâts infligés par le coup, dégâts de protection
animtype = Light                 ;Type d'animation : Light , Medium , Heavy , Back (def: Light)
guardflag = MA                   ;Positions sur lesquelles le coup peut être bloqué
hitflag = MAF                    ;Positions sur lesquelles le coup peut toucher
priority = 3, Hit                ;Priorité de l'attaque : de 0 (le plus faible) à 7 (le plus fort), 4 par défault
;Type Hit (touche)/Miss (rate)/Dodge (évite) (Def: Hit)
pausetime = 8, 8                 ;Temps de pause de l'attaquant, temps de tremblement de l'adversaire
sparkno = 0                      ;N° de l'animation de spark (Def: défini avant)
sparkxy = -10, -76               ;Position X du hit spark, par rapport à P2,
;Position Y du hit spark, par rapport à P1
hitsound = 5, 0                  ;Son à jouer sur le coup
guardsound = 6, 0                ;Son à jouer si coup bloqué
ground.type = High               ;Type : High, Low, Trip (def: Normal)
ground.slidetime = 5             ;Temps pendant lequel l'adversaire glisse vers l'arrière
ground.hittime  = 12             ;Temps pendant lequel l'adversaire reste dans un state de hit (touché)
ground.velocity = -4             ;Vitesse à laquelle l'adversaire est repoussé
airguard.velocity = -1.9,-.8     ;Vitesse sur protection dans les airs (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type : High, Low, Trip (def: idem que ground.type)
air.velocity = -1.4,-3           ;Vitesse X,Y à laquelle l'adversaire est repoussé
air.hittime = 12                 ;Délai avant que l'adversaire retrouve le contrôle dans les airs

[State 200, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 200, 7]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Petit poing debout
; Difficulté CNS : facile
[Statedef 205]
type    = S                      ;State-type: S-debout, C-accroupi, A-air, L-liedown
movetype= A                      ;Move-type: A-Attaque, I-Inoccupé, H-Touché
physics = S                      ;Physics: S-Debout, C-Accroupi, A-air
juggle  = 1                      ;Nombre de points de juggle requis pour ce mouvement
;Commonly-used controllers:
velset = 0,0                     ;Règle les vitesse (x,y) (Def: inchangé)
ctrl = 0                         ;Règle le ctrl (Def: inchangé)
anim = 205                       ;Change l'animation (Def: pas de changement)
poweradd = 20                    ;Power à ajouter (Def: 0)
sprpriority = 2                  ;Règle la priorité d'affichage des sprites à 2 (devant)

[State 200, 1]
type = HitDef
trigger1 = time = 0
attr = S, NA                     ;Attribut : Debout (S), Normale (N) Attaque (A)
damage = 23, 0                   ;Dégâts infligés par le coup, dégâts de protection
animtype = Light                 ;Type d'animation : Light , Medium , Heavy , Back (def: Light)
guardflag = MA                   ;Positions sur lesquelles le coup peut être bloqué
hitflag = MAF                    ;Positions sur lesquelles le coup peut toucher
priority = 3, Hit                ;Priorité de l'attaque : de 0 (le plus faible) à 7 (le plus fort), 4 par défault
;Type Hit (touche)/Miss (rate)/Dodge (évite) (Def: Hit)
pausetime = 8, 8                 ;Temps de pause de l'attaquant, temps de tremblement de l'adversaire
sparkno = 0                      ;N° de l'animation de spark (Def: défini avant)
sparkxy = -10, -76               ;Position X du hit spark, par rapport à P2,
;Position Y du hit spark, par rapport à P1
hitsound = 5, 0                  ;Son à jouer sur le coup
guardsound = 6, 0                ;Son à jouer si coup bloqué
ground.type = High               ;Type : High, Low, Trip (def: Normal)
ground.slidetime = 5             ;Temps pendant lequel l'adversaire glisse vers l'arrière
ground.hittime  = 12             ;Temps pendant lequel l'adversaire reste dans un state de hit (touché)
ground.velocity = -4             ;Vitesse à laquelle l'adversaire est repoussé
airguard.velocity = -1.9,-.8     ;Vitesse sur protection dans les airs (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type : High, Low, Trip (def: idem que ground.type)
air.velocity = -1.4,-3           ;Vitesse X,Y à laquelle l'adversaire est repoussé
air.hittime = 12                 ;Délai avant que l'adversaire retrouve le contrôle dans les airs

[State 200, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 200, 7]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;---------------------------------------------------------------------------
; Coup de poing moyen debout
; Difficulté CNS : facile
; Notez le controller Width. Il rend la boîte de poussée de KFM plus large,
; ce qui lui évite d'être trop près de l'adversaire. Faites Ctrl-C et voyez
; la barre rouge à ses pieds.
; Le sprpriority pour ce state est de -1, au lieu de l'habituel 2 pour les
; attaques. Ceci fait apparaître KFM derrière l'adversaire au début.

; Le controller SprPriority du [State 210, 4] met KFM sur le devaant quand
; son bras a pivoté.
; Pour arrêter la pause de KFM dans la frame de pivot, il y a un ChangeAnim
; dans [State 210, 3] qui détecte si le coup est entré en contact avec
; l'adversaire durant cette frame et qui passe à l'élément d'animation
; suivant (notez le paramètre elem=6). Si vous ne voyez pas ce que cela fait,
; mettez ce controller en commentaire, puis touchez quelqu'un avec cette
; attaque.
[Statedef 210]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 65
ctrl = 0
velset = 0,0
anim = 210
sprpriority = -1

[State 220, Snd]
type = PlaySnd
trigger1 = time = 1
value = s777,7


[State 210, Width]
type = Width
trigger1 = (AnimElemTime (2) >= 0) && (AnimElemTime (7) < 0)
value = 15,0

[State 210, 1]
type = PlaySnd
trigger1 = animelem = 7
trigger2 = animelem = 10
trigger3 = animelem = 16
trigger4 = animelem = 23
trigger5 = animelem = 29
trigger6 = animelem = 35
value = 0, 0


[State 210, 2]
type = HitDef
trigger1 = animelem = 7
trigger2 = animelem = 12
trigger3 = animelem = 18
trigger4 = animelem = 25
trigger5 = animelem = 31
trigger6 = animelem = 37
attr = S, NA                     ;Attribut : Debout (S), Normale (N) Attaque (A)
damage = 13, 0                   ;Dégâts infligés par le coup, dégâts de protection
animtype = Light                 ;Type d'animation : Light , Medium , Heavy , Back (def: Light)
guardflag = MA                   ;Positions sur lesquelles le coup peut être bloqué
hitflag = MAF                    ;Positions sur lesquelles le coup peut toucher
priority = 3, Hit                ;Priorité de l'attaque : de 0 (le plus faible) à 7 (le plus fort), 4 par défault
;Type Hit (touche)/Miss (rate)/Dodge (évite) (Def: Hit)
pausetime = 8, 8                 ;Temps de pause de l'attaquant, temps de tremblement de l'adversaire
sparkno = 0                      ;N° de l'animation de spark (Def: défini avant)
sparkxy = -10, -76               ;Position X du hit spark, par rapport à P2,
;Position Y du hit spark, par rapport à P1
hitsound = 5, 0                  ;Son à jouer sur le coup
guardsound = 6, 0                ;Son à jouer si coup bloqué
ground.type = High               ;Type : High, Low, Trip (def: Normal)
ground.slidetime = 5             ;Temps pendant lequel l'adversaire glisse vers l'arrière
ground.hittime  = 12             ;Temps pendant lequel l'adversaire reste dans un state de hit (touché)
ground.velocity = -4             ;Vitesse à laquelle l'adversaire est repoussé
airguard.velocity = -1.9,-.8     ;Vitesse sur protection dans les airs (def: (air.xvel*1.5, air.yvel/2))
air.type = High                  ;Type : High, Low, Trip (def: idem que ground.type)
air.velocity = -1.4,-3           ;Vitesse X,Y à laquelle l'adversaire est repoussé
air.hittime = 12                 ;Délai avant que l'adversaire retrouve le contrôle dans les airs

[State 210, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Coup de pied faible debout
; Difficulté CNS : facile
[Statedef 230]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 22
ctrl = 0
velset = 0,0
anim = 230
sprpriority = 2

[State 230, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 230, 2]
type = HitDef
trigger1 = Time = 0
attr = S, NA
animtype  = Medium
damage    = 26
guardflag = MA
pausetime = 12,12
sparkno = 0
sparkxy = -10,-37
hitsound   = 5,1
guardsound = 6,0
ground.type = Low
ground.slidetime = 10
ground.hittime  = 12
ground.velocity = -5
air.velocity = -2.5,-3.5

[State 230, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Coup de pied fort debout
; Difficulté CNS : facile
[Statedef 240]
type    = S
movetype= A
physics = S
juggle  = 5
poweradd= 65
ctrl = 0
velset = 0,0
anim = 240
sprpriority = 2

[State 240, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1


[State 220, Snd]
type = PlaySnd
trigger1 = time = 1
value = s777,7

[State 240, 2]
type = HitDef
trigger1 = Time = 0
attr = S, NA
animtype  = Medium
damage    = 63
guardflag = MA
pausetime = 15,12
sparkno = 3
sparkxy = -10,-60
hitsound   = 5,3
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -10,-3
air.velocity = -2.2,-3.2
fall = 1

[State 240, 3]
type = PosAdd
trigger1 = AnimElem = 7
x = 12

[State 240, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Coup de poing faible accroupi
; Difficulté CNS : facile
; Description : Attaque accroupie simple. Le paramètre guardflag du
;     HitDef est mis sur "L", signifiant que le mouvement ne peut être
;     bloqué qu'en bas (accroupi), et non par les adversaires debout
;     ou en saut.
;     Comme pour toutees les attaques faibles, c'est une bonne idée
;     d'avoir une valeur faible pour les paramètres slidetime et hittime,
;     ce qui permet que l'adversaire ne soit pas étourdi trop longtemps.
;     Pour toutes les attaques accroupies vous devez vous rappeler de
;     régler le paramètre attr pour indiquer qu'il s'agit d'un attaque
;     accroupie. Dans ce cas, "C, NA" indique "Accroupi, attaque normale"
;     (Crouching, Normal Attack).
;     La priorité du HitDef est mise à 3, au lieu du 4 par défaut, donc
;     cette attaque a une priorité inférieure à la plupart des autres,
;     ce qui signifie que KFM sera touché seul au lieu d'être touché avec
;     son adversaire si leurs boîtes de collision (Clsn1) rencontrent leurs
;     boîte Clsn2 en même temps.
[Statedef 400]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 15
ctrl = 0
anim = 400
sprpriority = 2

[State 400, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 600, qbgè`]
type = HitDef
trigger1 = Time = 0
attr = A, NA
animtype = Heavy
damage    = 60
priority  = 4, Hit
hitflag = MAF
guardflag = HA
pausetime = 13,10
guard.pausetime = 2,2
sparkxy = -5,-20
hitsound = 5,3
guardsound = 6,0
ground.type = high
ground.slidetime = 20
ground.hittime  = 30
guard.ctrltime = 20
ground.velocity = -2.5, 2
guard.velocity = -8
air.velocity = -2.5, -2
airguard.velocity = -6.67,-1
ground.cornerpush.veloff = -11.2
air.cornerpush.veloff = 0
airguard.cornerpush.veloff = 0
air.hittime = 14
fall = 1
fall.recover = 0
air.fall = 1
air.recover = 0
yaccel = .2
givepower = 35, 35

[State 220, Snd]
type = PlaySnd
trigger1 = time = 1
value = s777,7



[State 400, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Crouching strong punch
; Difficulté CNS : easy
; Description: This is a 2-hit move. It is done by having two HitDefs
;     triggered, one for each frame of animation that hits.
;     Notice how the first hit cannot be guarded by an opponent in the
;     air, because of the "M" in the guardflag, meaning it can only
;     be guarded "middle". The second hit has an "MA" guardflag, so
;     it can be guarded both on the ground and in the air.
[Statedef 410]
type    = C
movetype= A
physics = C
juggle  = 6
poweradd= 50
ctrl = 0
anim = 410
sprpriority = 2

[State 410, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

;This is the first hit, triggered on the 3rd element of animation.
[State 410, 2]
type = HitDef
trigger1 = AnimElem = 3
attr = C, NA
damage    = 37
animtype  = Medium
hitflag = MAF
guardflag = M
pausetime = 12,12
sparkno = 1
sparkxy = -10,-55
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -4
air.velocity = -3,-4

;This is the second hit, triggered on the 4th element of animation.
[State 410, 3]
type = HitDef
trigger1 = AnimElem = 4
attr = C, NA
damage    = 36
animtype  = Medium
hitflag = MAF
guardflag = MA
pausetime = 12,12
sparkxy = -10,-83
hitsound   = 5,2
guardsound = 6,0
ground.type = High
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -7
air.velocity = -3,-4

[State 410, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Crouching light kick
; Difficulté CNS : easy
[Statedef 430]
type    = C
movetype= A
physics = C
juggle  = 5
poweradd= 22
ctrl = 0
anim = 430
sprpriority = 2

[State 430, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 430, 2]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 28
animtype  = Light
hitflag = MAFD
guardflag = L
pausetime = 12,12
sparkno = 0
sparkxy = -10,-8
hitsound   = 5,1
guardsound = 6,0
ground.type = Low
ground.slidetime = 6
ground.hittime  = 12
ground.velocity = -5
air.velocity = -2,-3
down.velocity = -5,0
down.hittime = 20

[State 430, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Crouch Strong Kick
; Difficulté CNS : easy
; Description: This move uses "Trip" for the "ground.type" parameter in
;     its HitDef. It's a special type that puts the opponent in a tripped
;     animation as he falls. Also, the hitflag parameter in the HitDef
;     is set to "MAFD". The "D" indicates that a downed opponent can be
;     hit by the attack.
[Statedef 440]
type    = C
movetype= A
physics = C
juggle  = 7
poweradd= 70
ctrl = 0
anim = 440
sprpriority = 2

[State 440, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 2

[State 440, 3]
type = HitDef
trigger1 = Time = 0
attr = C, NA
damage    = 72
hitflag = MAFD
guardflag = L
pausetime = 12,12
sparkno = 1
sparkxy = -5,-10
hitsound   = 5,2
guardsound = 6,0
ground.type = Trip
ground.slidetime = 10
ground.hittime  = 15
ground.velocity = -1.5,-2
air.velocity = -1.2,-3
guard.velocity = -5
fall = 1

[State 440, 4]
type = ChangeState
trigger1 = AnimTime = 0
value = 11
ctrl = 1

;---------------------------------------------------------------------------
;Jump Light Punch
; Difficulté CNS : easy
[Statedef 600]
type    = A
movetype= A
physics = A
juggle  = 2
poweradd= 11
ctrl = 0
anim = 600
sprpriority = 2

[State 220, Snd]
type = PlaySnd
trigger1 = time = 1
value = s777,7

[State 600, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 600, 2]
type = HitDef
trigger1 = animelem = 8
attr = A, NA
damage    = 20
guardflag = HA
priority = 3
pausetime = 7,8
sparkno = 0
sparkxy = -10,-58
hitsound   = 5,0
guardsound = 6,0
ground.type = High
ground.slidetime = 5
ground.hittime  = 5
ground.velocity = -4
air.velocity = -1.3,-3


[State 600, 2]
type = HitDef
trigger1 = animelem = 17
attr = A, NA
damage    = 20
guardflag = HA
priority = 3
pausetime = 7,8
sparkno = 0
sparkxy = -10,-58
hitsound   = 5,0
guardsound = 6,0
ground.type = High
ground.slidetime = 5
ground.hittime  = 5
ground.velocity = -4
air.velocity = -1.3,-3



;---------------------------------------------------------------------------
;Jump Strong Punch
; Difficulté CNS : easy
[Statedef 610]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 65
ctrl = 0
anim = 610
velset = 0,2.5
sprpriority = 2

[State 610, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 610, 3]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage = 72
guardflag = HA
priority = 4
pausetime = 12,12
sparkno = 1
sparkxy = -10,-55
hitsound   = 5,3
guardsound = 6,0
animtype = Med
ground.type = High
ground.slidetime = 17
ground.hittime  = 17
ground.velocity = -5
air.velocity = -3,-4

;---------------------------------------------------------------------------
;Jump Light Kick
; Difficulté CNS : easy
[Statedef 630]
type    = A
movetype= A
physics = A
juggle  = 3
poweradd= 20
ctrl = 0
anim = 630
sprpriority = 2

[State 630, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 0

[State 630, 2]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage = 26
guardflag = HA
priority = 3
pausetime = 8,8
sparkno = 1
sparkxy = -5,-35
hitsound   = 5,0
guardsound = 6,0
ground.type = High
ground.slidetime = 6
ground.hittime  = 6
ground.velocity = -4
air.velocity = -2,-3

;---------------------------------------------------------------------------
;Jump Strong Kick
; Difficulté CNS : easy
[Statedef 640]
type    = A
movetype= A
physics = A
juggle  = 4
poweradd= 65
ctrl = 0
anim = 640
sprpriority = 2

[State 640, 2]
type = PlaySnd
trigger1 = Time = 2
value = 0, 1

[State 220, Snd]
type = PlaySnd
trigger1 = time = 1
value = s777,8

[State 640, 3]
type = HitDef
trigger1 = Time = 0
attr = A, NA
damage    = 70
guardflag = HA
priority = 4
pausetime = 12,12
sparkno = 1
sparkxy = -10,-40
hitsound   = 5,3
guardsound = 6,0
animtype = Med
ground.type = High
ground.slidetime = 15
ground.hittime  = 15
ground.velocity = -5
air.velocity = -3,-4

;---------------------------------------------------------------------------
;Kung Fu Throw - Attempt
; Difficulté CNS : medium-advanced
; Description: Throws are not difficult to make, although then can be
;     tedious at times. Throw attempt states have a HitDef of a
;     special format. The key parameters in a throw are p1stateno
;     and p2stateno. If the HitDef successfully connects, then
;     the attacker will change to the state number specified by
;     p1stateno, and the opponent will be change to the state
;     number assigned to p2stateno. The special thing about p2stateno
;     is that the opponent will be temporarily brought into the
;     attacker's state file. In this case, no matter who the
;     opponent is, he will be taken to state 820 of this file (kfm.cns)
;     and remain here until the end of the throw (look at his debug
;     information when he is being thrown; the text changes to yellow
;     to mean that he is in another player's state file).
[Statedef 800]
type    = S
movetype= A
physics = S
juggle  = 0
velset = 0,0
ctrl = 0
anim = 800
sprpriority = 2

; Notes: The '-' symbol in the hitflag field means that it only affects
;   players who are not in a hit state. This prevents KFM from combo-ing
;   into the throw. The priority should be set to a low number, such as
;   1 or 2, so that the throw does not take precedence over normal attacks.
;   The type of priority must always be set to "Miss" or "Dodge" for throws,
;   otherwise strange behavior can result.
[State 800, 1]
type = HitDef
Trigger1 = Time = 0
attr = S, NT          ;Attributes: Standing, Normal Throw
hitflag = M-          ;Affect only ground people who are not being hit
priority = 1, Miss    ;Throw has low priority, must be miss or dodge type.
sparkno = -1          ;No spark
sprpriority = 1       ;Draw in front of p2
p1facing = ifelse (command = "holdfwd", -1, 1) ;Turn if holding forwards
p2facing = 1          ;Force p2 to face KFM
p1stateno = 810       ;On success, KFM changes to state 810
p2stateno = 820       ;If hit, p2 changes to state 820 in KFM's cns
guard.dist = 0        ;This prevents p2 from going into a guard state if close
fall = 1              ;Force p2 into falling down

[State 800, 2]
type = ChangeState
Trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Kung Fu Throw - Throwing the opponent
; Description: In this state, KFM throws the opponent by binding him to
;     various offsets based on his current frame of animation. For
;     example, [State 810, Bind 1] binds the opponent to an offset of
;     28 pixels in front of KFM. That puts him around where KFM's hand
;     is at. Is is important to keep the opponent bound using a
;     TargetBind controller at all times, until you let him go. This
;     is especially important if your player has a Clsn2 box that
;     allows him to get hit while throwing someone. Each time a player
;     gets hit, all his bound targets will be set to a fall state. If
;     the opponent is not bound, then he might get stuck in his thrown
;     state when his attacker is knocked out of the throw halfway.
; Notes: There is a TargetLifeAdd controller to decrease the opponent's
;     life, and a TargetState controller to change his state to a
;     falling state when KFM lets go of him.
[Statedef 810]
type    = S
movetype= A
physics = N
anim = 810
poweradd = 60

[State 810, Grab Sound]
type = PlaySnd
trigger1 = AnimElem = 2
value = 1, 1

[State 810, Throw Sound]
type = PlaySnd
trigger1 = AnimElem = 7
value = 800, 0

[State 810, Bind 1]
type = TargetBind
trigger1 = AnimElemTime(2) < 0
pos = 28, 0

[State 810, Width 2-11]
type = Width
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(12) < 0
edge = 60,0

[State 810, Bind 2-4]
type = TargetBind
trigger1 = AnimElemTime(2) >= 0 && AnimElemTime(5) < 0
pos = 58, 0

[State 810, Bind 5]
type = TargetBind
trigger1 = AnimElemTime(5) >= 0 && AnimElemTime(6) < 0
pos = 47, 0

[State 810, Bind 6]
type = TargetBind
trigger1 = AnimElemTime(6) >= 0 && AnimElemTime(7) < 0
pos = 41, -60

[State 810, Bind 7]
type = TargetBind
trigger1 = AnimElemTime(7) >= 0 && AnimElemTime(8) < 0
pos = 25, -75

[State 810, Bind 8]
type = TargetBind
trigger1 = AnimElemTime(8) >= 0 && AnimElemTime(9) < 0
pos = 15, -90

[State 810, Bind 9]
type = TargetBind
trigger1 = AnimElemTime(9) >= 0 && AnimElemTime(10) < 0
pos = -5, -96

[State 810, Bind 10]
type = TargetBind
trigger1 = AnimElemTime(10) >= 0 && AnimElemTime(11) < 0
pos = -14, -90

[State 810, Bind 11]
type = TargetBind
trigger1 = AnimElem = 11
pos = -50, -50

[State 810, Hurt 11]
type = TargetLifeAdd
trigger1 = AnimElem = 11
value = -78

[State 810, Throw 11]
type = TargetState
trigger1 = AnimElem = 11
value = 821

[State 810, Turn 12]
type = Turn
trigger1 = AnimElem = 12

[State 810, Pos 15]
type = PosAdd
trigger1 = AnimElem = 15
x = -10

[State 810, State End]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
;Thrown by Kung Fu Throw
; (a custom gethit state)
; Description: This is the state that the opponent changes to after being
;     hit by KFM's throw HitDef. The important thing here is to use a
;     ChangeAnim2 controller. The difference between ChangeAnim2 and
;     ChangeAnim is that ChangeAnim2 changes the player's animation to
;     an action in the AIR file of the attacker (in this case, kfm.air),
;     whereas ChangeAnim always changes the player to an action in his
;     own AIR file. Look at Action 820 in kfm.air for some extra
;     comments.
[Statedef 820]
type    = A
movetype= H
physics = N
velset = 0,0

[State 820, 1]
type = ChangeAnim2
Trigger1 = Time = 0
value = 820

;---------------------------------------------------------------------------
;Thrown by Kung Fu Throw - thrown into the air
; (a custom gethit state)
; Description: This state has the opponent flying through the air and
;     falling down onto the ground. The SelfState controller sets the
;     opponent back using to his own state file when he his the ground.
;     Controllers 821,2 and 821,3 allow the opponent to recover by
;     hitting his recovery command when he is falling.
[Statedef 821]
type    = A
movetype= H
physics = N
velset = 2.8,-7
poweradd = 40

[State 821, 1] ;Gravity
type = VelAdd
Trigger1 = 1
y = .4

[State 821, 2] ; Recover near ground (use ChangeState)
type = ChangeState
triggerall = Vel Y > 0
triggerall = Pos Y >= -20
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5200 ;HITFALL_RECOVER

[State 821, 3] ; Recover in mid air (use SelfState)
type = SelfState
triggerall = Vel Y > 0
triggerall = alive
triggerall = CanRecover
trigger1 = Command = "recovery"
value = 5210 ;HITFALL_AIRRECOVER

[State 821, 4] ;Hit ground
type = SelfState
trigger1 = Vel Y > 0
trigger1 = Pos Y >= 0
value = 5100 ;Hit ground


;---------------------------------------------------------------------------
; Kung Fu Palm
; Difficulté CNS : medium
; Description: This is like a standard attack, but with some differences.
;   There are two HitDefs in this attack. One is triggered when the
;   opponent is near (using a p2bodydist trigger), and the other
;   when the opponent is farther away. The main differences between
;   the near and far versions of the HitDefs is that the near version
;   has a "fall" parameter set to 1, causing the opponent to be knocked
;   down. Other minor differences are the damage, and the velocity to
;   give the opponent.
;   The line "attr = S, SA" line means this is a Standing, Special Attack.
;   It is important you have the attr parameter set correctly for all
;   you HitDefs.
[Statedef 1000]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= -1000
velset = 0,0
anim = 1000
ctrl = 0
sprpriority = 2

[State 1000, 1]
type = PlaySnd
trigger1 = Time = 8
value = 0, 3

[State 1000, 1]
type = PlaySnd
trigger1 = animelem = 2
value = s777, 1

[State 1000, 1]
type = PlaySnd
trigger1 = animelem = 1
value = s777, 2


[State 0, VelSet]
type = VelSet
trigger1 = animelem = 12
x = 3
;ignorehitpause =
;persistent =


[State 1000, 5] ;Opponent near
type = HitDef
trigger1 = AnimElem = 33
trigger2 = AnimElem = 35
attr = S, SA
animtype  = Hard
damage    = 45, 4
priority  = 6
guardflag = MA
pausetime = 15,15
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -10,-7.5
air.velocity = -4,-3
fall = 1
envshake.time = 30
envshake.freq = 30
envshake.ampl = -3




[State 1000, 6] ;Opponent not near
type = HitDef
trigger1 = AnimElem = 7
trigger2 = AnimElem = 9
trigger3 = AnimElem = 13
trigger4 = AnimElem = 15
trigger5 = AnimElem = 18
trigger6 = AnimElem = 20
trigger7 = AnimElem = 23
trigger8 = AnimElem = 25
trigger9 = AnimElem = 28
trigger10 = AnimElem = 30
attr = S, SA
animtype  = Hard
damage    = 25, 4
priority  = 5
guardflag = MA
pausetime = 8,8
sparkxy = -10,-60
hitsound   = 5,1
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -2
air.velocity = -4,-2.5


[State 1000, 7]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Strong Kung Fu Palm
; Difficulté CNS : medium
[Statedef 1010]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 120
velset = 0,0
anim = 1010
ctrl = 0
sprpriority = 2

[State 1010, 1]
type = PlaySnd
trigger1 = Time = 9
value = 0, 3

[State 1010, 2]
type = PosAdd
trigger1 = AnimElem = 2
x = 20

[State 1010, 3]
type = PosAdd
trigger1 = AnimElem = 3
trigger2 = AnimElem = 12
x = 10

[State 1010, 4]
type = PosAdd
trigger1 = AnimElem = 5
x = 5

[State 1010, 5]
type = VelSet
trigger1 = AnimElem = 5
x = 4

[State 1010, 6] ;Opponent near
type = HitDef
trigger1 = AnimElem = 5
trigger1 = p2bodydist X < 40
attr = S, SA
animtype  = Hard
damage    = 94, 4
priority  = 6
guardflag = MA
pausetime = 15,15
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -4,-3.5
air.velocity = -4,-3
fall = 1

[State 1010, 7] ;Opponent not near
type = HitDef
trigger1 = AnimElem = 5
trigger1 = p2bodydist X >= 40
attr = S, SA
animtype  = Hard
damage    = 89, 4
priority  = 5
guardflag = MA
pausetime = 15,15
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 12
ground.hittime  = 15
ground.velocity = -7
air.velocity = -4,-2.5

[State 1010, 8]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Fast Kung Fu Palm
; Difficulté CNS : advanced
; Description: This is a complicated attack move. If you're a beginner,
;     you should skip looking at this for now and check it later when
;     you are more comfortable with the cns.
;     This move puts the other player in a custom get-hit state.
;     The line "p2stateno = 1025" in the HitDef does this. KFM has some
;     palette effects as well as after-image effects.
[Statedef 1020]
type    = S
movetype= A
physics = N
juggle  = 6
poweradd= IfElse((var(55) = 1),0,-330)
velset = 0,0
anim = 1020
ctrl = 0
sprpriority = 2

[State 1020, InvincibleInCounter] ; NEW FOR KFM MASTER
type = NotHitBy
trigger1 = var(55) = 1
value = SCA

[State 1020, Pal] ; NEW FOR KFM MASTER
type = PalFX
trigger1 = Time = 0
trigger1 = var(55) = 1
color = 0
invertall = 1
add = -35,0,185
time = 5

[State 1020, Friction]
type = VelMul
trigger1 = 1
x = .85 * ifelse (AnimElemTime(6) < 0, 1, .8)

[State 1020, Afterimage]
type = AfterImage
trigger1 = Time = 0
length = 13
PalBright   =  30, 30,  0
PalContrast =  70, 70, 20
PalAdd      = -10,-10,-10
PalMul      = .85,.85,.50
TimeGap  = 1
FrameGap = 2
Trans = Add
time = 2

[State 1020, Afterimage]
type = AfterImageTime
trigger1 = AnimElemTime(8) < 0
time = 2

[State 1020, Blink Yellow]
type = PalFX
trigger1 = Time = 0 && var(55) = 0
trigger2 = Time = 5 && var(55) = 1
time = 20
add = 32,16,0
sinadd = 64,32,5,3

[State 1020, 1]
type = PlaySnd
trigger1 = Time = 2
value = 0, 3

[State 1020, 2]
type = PosAdd
trigger1 = AnimElem = 2
x = 20

[State 1020, 3]
type = PosAdd
trigger1 = AnimElem = 3
trigger2 = AnimElem = 11
x = 10

[State 1020, 4]
type = PosAdd
trigger1 = AnimElem = 4
x = 5

[State 1020, 5]
type = VelSet
trigger1 = AnimElem = 4
x = 13

[State 1020, 6]
type = HitDef
trigger1 = AnimElem = 4
attr = S, SA
animtype  = Hard
damage    = 102, 5
getpower  = 0
priority  = 5
guardflag = MA
pausetime = 8,7
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 20
ground.hittime  = 20
ground.velocity = -8,-7
guard.velocity = -7
air.velocity = -8,-7
airguard.velocity = -5, -4
fall = 1
p2stateno = 1025

[State 1020, VarInit] ; NEW FOR KFM MASTER
type = VarSet
trigger1 = AnimTime = -1
trigger1 = var(55) = 1
var(55) = 0

[State 1020, 7]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;------------------
; Hit by Fast Kung Fu Palm - shaking from the hit
; (a custom gethit state)
; See State 1020 for details
[Statedef 1025]
type    = A
movetype= H
physics = N
velset = 0,0

[State 1025, Anim] ;Custom animation
type = ChangeAnim2
trigger1 = 1
value = 1025

[State 1025, State]
type = ChangeState
trigger1 = HitShakeOver = 1
value = 1026

;------------------
; Hit by Fast Kung Fu Palm - flying through the air
; (a custom gethit state)
[Statedef 1026]
type    = A
movetype= H
physics = N

[State 1026, Velocity]
type = HitVelSet
trigger1 = Time = 0
x = 1
y = 1

[State 1026, Gravity]
type = VelAdd
trigger1 = 1
y = .45

[State 1026, No scroll]
type = ScreenBound
triggerall = Pos y < -15
trigger1 = BackEdgeBodyDist < 65
trigger2 = FrontEdgeBodyDist < 65
value = 1
movecamera = 0,1

[State 1026, Hit wall]
type = ChangeState
triggerall = Pos y < -15
trigger1 = BackEdgeBodyDist <= 20
trigger2 = FrontEdgeBodyDist <= 20
value = 1027

[State 1026, Hit ground]
type = SelfState
trigger1 = (Vel y > 0) && (Pos y >= 0)
value = 5100

;------------------
; Hit by Fast Kung Fu Palm - hit wall
; (a custom gethit state)
[Statedef 1027]
type    = A
movetype= H
physics = N

[State 1027, Turn]
type = Turn
trigger1 = (Time = 0) && (FrontEdgeBodyDist <= 30)

[State 1027, Pos]
type = PosAdd
trigger1 = Time = 0
x = 15 - BackEdgeBodyDist

[State 1027, Stop moving]
type = PosFreeze
trigger1 = 1
x = 1
y = 1

[State 1027, No scroll]
type = ScreenBound
trigger1 = 1
value = 1
movecamera = 0,1

[State 1027, Spark]
type = Explod
trigger1 = Time = 0
anim = F72
pos = 0, floor (screenpos y) - 50
postype = back
sprpriority = 3

[State 1027, Anim]
type = ChangeAnim2
trigger1 = Time = 0
value = 1027

[State 1027, Sound]
type = PlaySnd
trigger1 = Time = 0
value = F7,0

[State 1027, State]
type = ChangeState
trigger1 = AnimTime = 0
value = 1028

;------------------
; Hit by Fast Kung Fu Palm - bounce off wall
; (a custom gethit state)
[Statedef 1028]
type    = A
movetype= H
physics = N

[State 1028, 1]
type = NotHitBy
trigger1 = 1
value = , NA, NP

[State 1028, Vel Y]
type = VelSet
trigger1 = Time = 0
y = -6

[State 1028, Vel X]
type = VelSet
trigger1 = Time = 0
x = 1.6

[State 1028, Turn]
type = Turn
trigger1 = (Time = 0) && (BackEdgeDist < 30)

[State 1028, Gravity]
type = VelAdd
trigger1 = 1
y = .35

[State 1028, Anim 5050] ;Self falling animation
type = ChangeAnim
trigger1 = Time = 0
trigger1 = !SelfAnimExist(5052)
value = 5050

[State 1028, Anim 5052] ;Self falling animation (diagup type)
type = ChangeAnim
trigger1 = Time = 0
trigger1 = SelfAnimExist(5052)
value = 5052

[State 1028, Anim 5060] ;Coming down - normal
type = ChangeAnim
trigger1 = Vel Y > -2
trigger1 = Anim = 5050
trigger1 = SelfAnimExist(5060)
persistent = 0
value = 5060

[State 1028, Anim 5062] ;Coming down - diagup type
type = ChangeAnim
trigger1 = Vel Y > -2
trigger1 = Anim = 5052
trigger1 = SelfAnimExist(5062)
persistent = 0
value = 5062

[State 1028, Hit ground]
type = SelfState
trigger1 = (Vel y > 0) && (Pos y >= 0)
value = 5100

;---------------------------------------------------------------------------
; Kung Fu Knee
; Difficulté CNS : medium
; Description: Like the Kung Fu Palm, this is a special attack. This attack
;     begins on the ground, launches KFM into the air, then ends when KFM
;     lands on the ground. To achieve this, we use three states. The first
;     has KFM starting on the ground (note that type = S in the Statedef).
;     The ChangeState controller brings KFM into the second state (state
;     1051) when his ground animation ends. The second state controls KFM's
;     movement into the air and back towards the ground. The last state
;     (state 1052) stops KFM from moving when he touches the ground, and
;     brings him back to his stand state (state 0) when the animation is
;     over. More details are given in comments before each of the following
;     states.
[Statedef 1050]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 110
velset = 0,0
anim = 1050
ctrl = 0
sprpriority = 2

[State 1050, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 2

[State 1050, 2]
type = PosAdd
trigger1 = AnimElem = 2
x = 15

[State 1050, 3]
type = PosAdd
trigger1 = AnimElem = 4
x = 25

[State 1050, 4]
type = HitDef
trigger1 = Time = 0
attr = A, SA
animtype  = Medium
damage    = 80, 4
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = -10,-70
hitsound   = 5,3
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 18
ground.velocity = -3.5,-7
guard.velocity = -7
air.velocity = -3.5,-7
fall = 1

[State 1050, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 1051

;------------------
; Light Kung Fu Knee - jump
; Description: This state uses a velset parameter in the Statedef to make
;     KFM move upwards. A value of 2,-6 means 2 pixels/tick forwards, and
;     6 pixels/tick upwards. Since this is an aerial state, the type is set
;     to A in the Statedef.
;     Notice that physics = N (N for None) here. This means we are not using
;     the built-in aerial physics model (physics = A), so we have complete
;     control over what KFM does in this state. Since we do not have
;     physics = A to take care of gravity for us, we need to put in our own
;     controller for that. Controller 1051,1 does the work of pulling KFM
;     down towards the ground. Controller 1051,2 checks if KFM has reached
;     the ground, and changes to state 1052 if so.
;     In this state's Statedef, we will use the hitdefpersist parameter to
;     retain the HitDef information from the last state. If we did not have
;     hitdefpersist, the HitDef will be turned off between state changes.
[Statedef 1051]
type    = A
movetype= A
physics = N
velset = 2,-6
anim = 1051
hitdefpersist = 1 ;Keep the HitDef from previous state active

[State 1051, 1] ;Gravity
type = VelAdd
trigger1 = 1
y = .45

[State 1051, 2]
type = ChangeState
trigger1 = Command = "a" || Command = "b" || Command = "c"
trigger1 = Vel y < -1
value = 1055

[State 1051, 3] ;Change state when KFM is close to ground
type = ChangeState
trigger1 = Vel Y > 0 && Pos Y >= -10
value = 1052

;------------------
; Light Kung Fu Knee - land
; Description: This is KFM's landing state. There is a velset in the
;     Statedef to stop KFM from moving. Since KFM's y-position can be any
;     number greater than -10 upon entering this state (see the ChangeState
;     controller in State 1051), we need to reset it to 0, the ground
;     level. That is what controller 1052,1 is for.
[Statedef 1052]
type    = S
movetype= I
physics = S
anim = 1052
sprpriority = 1
velset = 0,0

[State 1052, 1] ;Reset y-position to ground level
type = PosSet
trigger1 = Time = 0
y = 0

[State 1052, 2] ;Play a sound for landing
type = PlaySnd
trigger1 = Time = 0
value = 40, 0

[State 1052, 3] ;Give KFM back control early
type = CtrlSet
trigger1 = AnimElem = 3, -1
value = 1

[State 1052, 4] ;Move KFM back a little
type = PosAdd
trigger1 = AnimElem = 4
x = -15

[State 1052, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;------------------
; Light Kung Fu Knee - kick
[Statedef 1055]
type    = A
movetype= A
physics = N
anim = 1055

[State 1055, 1]
type = PlaySnd
trigger1 = Time = 0
value = 100,0
channel = 0

[State 1055, 2]
type = PlaySnd
trigger1 = Time = 0
value = 0, 1

[State 1055, 3]
type = PosAdd
trigger1 = Time = 0
x = 10
y = -10

[State 1055, 4] ;Gravity
type = VelAdd
trigger1 = 1
y = .45

[State 1055, 5]
type = HitDef
trigger1 = Time = 0
attr = A, SA
animtype  = Med
damage    = 35 + (prevstateno = 1061)*5, 2
priority  = 4
guardflag = MA
pausetime = 12,12
sparkxy = 0,-90
hitsound   = 5,2
guardsound = 6,0
ground.type = High
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -6
guard.velocity = -6
air.velocity = -4,-5
airguard.velocity = -4,-4.5
air.fall = 1

[State 1055, 6] ;Change state when KFM is close to ground
type = ChangeState
trigger1 = Vel Y > 0 && Pos Y >= -5
value = 1056

;------------------
; Light Kung Fu Knee - land from kick
[Statedef 1056]
type    = S
movetype= I
physics = S
anim = 1056
sprpriority = 1
velset = 0,0

[State 1056, 1] ;Reset y-position to ground level
type = PosSet
trigger1 = Time = 0
y = 0

[State 1056, 2] ;Play a sound for landing
type = PlaySnd
trigger1 = Time = 0
value = 40, 0

[State 1056, 3]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Strong Kung Fu Knee
[Statedef 1060]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 120
velset = 0,0
anim = 1060
ctrl = 0
sprpriority = 2

[State 1060, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 2

[State 1060, 2]
type = PosAdd
trigger1 = AnimElem = 2
trigger2 = AnimElem = 3
x = 14

[State 1060, 3]
type = PosAdd
trigger1 = AnimElem = 4
x = 25

[State 1060, 4]
type = HitDef
trigger1 = Time = 0
attr = A, SA
animtype  = Medium
damage    = 93, 4
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = -10,-70
hitsound   = 5,3
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 18
ground.velocity = -3.5,-7.5
guard.velocity = -7
air.velocity = -3.5,-7.5
fall = 1

[State 1060, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 1061

;------------------
; Strong Kung Fu Knee - jump
[Statedef 1061]
type    = A
movetype= A
physics = N
velset = 2.5,-7.5
anim = 1061
hitdefpersist = 1 ;Keep the HitDef from previous state active

[State 1061, 1]
type = VelAdd
trigger1 = 1
y = .45

[State 1061, 2]
type = ChangeState
trigger1 = Command = "a" || Command = "b" || Command = "c"
trigger1 = Vel y < -1
value = 1055

[State 1061, 3]
type = ChangeState
trigger1 = Vel Y > 0 && Pos Y >= -10
value = 1052

;---------------------------------------------------------------------------
; Fast Kung Fu Knee
; Description: This version of the Kung Fu Knee hits up to 3 times (including
;     the kick).
[Statedef 1070]
type    = S
movetype= A
physics = S
juggle  = 6
poweradd= -330
velset = 0,0
anim = 1070
ctrl = 0
sprpriority = 2

[State 1070, Afterimage]
type = AfterImage
trigger1 = Time = 0
length = 13
PalBright   =  30, 30,  0
PalContrast =  70, 70, 20
PalAdd      = -10,-10,-10
PalMul      = .85,.85,.50
TimeGap  = 1
FrameGap = 2
Trans = Add
time = 2

[State 1070, Afterimage]
type = AfterImageTime
trigger1 = 1
time = 2

[State 1070, Blink Yellow]
type = PalFX
trigger1 = Time = 0
time = 20
add = 32,16,0
sinadd = 64,32,5,3

[State 1070, 1]
type = PlaySnd
trigger1 = Time = 1
value = 0, 2

[State 1070, 2]
type = PosAdd
trigger1 = AnimElem = 2
trigger2 = AnimElem = 3
x = 14

[State 1070, 3]
type = PosAdd
trigger1 = AnimElem = 4
x = 25

[State 1070, 4]
type = HitDef
trigger1 = Time = 0
attr = S, SA
animtype  = Medium
getpower  = 0
damage    = 35, 3
priority  = 5
hitflag   = MA
guardflag = MA
pausetime = 8,7
sparkxy = -10,-70
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 18
ground.velocity = -2,-6
guard.velocity = -7
air.velocity = -2,-6
fall = 1
fall.animtype = Med
fall.recovertime = 30

[State 1070, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 1071

;------------------
; Fast Kung Fu Knee - jump
[Statedef 1071]
type    = A
movetype= A
physics = N
velset = 2.5,-9
anim = 1071

[State 1071, Blink Yellow]
type = PalFX
trigger1 = Time = 0
time = 18
add = 32,16,0
sinadd = 64,32,5,3

[State 1071, Afterimage]
type = AfterImageTime
trigger1 = Vel Y < 0
time = 2

[State 1071, 1]
type = VelAdd
trigger1 = 1
y = .5

[State 1071, 2]
type = VelAdd
trigger1 = Vel Y >= -1
y = .2

[State 1071, 3]
type = HitDef
trigger1 = Time = 0
attr = A, SA
animtype  = Medium
getpower  = 0
damage    = 68, 4
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = -10,-70
hitsound   = 5,3
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 18
ground.velocity = -3,-9.5
guard.velocity = -7
air.velocity = -3,-9.5
fall = 1
fall.recovertime = 30

[State 1071, 4]
type = ChangeState
trigger1 = Command = "a" || Command = "b" || Command = "c"
trigger1 = Vel y < -1
trigger1 = Time > 0
value = 1075

[State 1071, 5]
type = ChangeState
trigger1 = Vel Y > 0 && Pos Y >= -10
value = 1052

;------------------
; Fast Kung Fu Knee - kick
[Statedef 1075]
type    = A
movetype= A
physics = N
anim = 1055

[State 1075, Afterimage]
type = AfterImageTime
trigger1 = 1
time = 2

[State 1075, Blink Yellow]
type = PalFX
trigger1 = Time = 0
time = 20
add = 32,16,0
sinadd = 64,32,5,3

[State 1075, 1]
type = PlaySnd
trigger1 = Time = 0
value = 100,0
channel = 0

[State 1075, 2]
type = PlaySnd
trigger1 = Time = 0
value = 0, 1

[State 1075, 3]
type = PosAdd
trigger1 = Time = 0
x = 10
y = -10

[State 1075, 4] ;Gravity
type = VelAdd
trigger1 = 1
y = .45

[State 1075, 5]
type = VelAdd
trigger1 = Vel Y >= -1
y = .2

[State 1075, 6]
type = HitDef
trigger1 = Time = 0
attr = A, SA
animtype  = Med
damage    = 42, 2
getpower  = 0
priority  = 4
guardflag = MA
pausetime = 12,12
sparkxy = 0,-90
hitsound   = 5,2
guardsound = 6,0
ground.type = High
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -6
guard.velocity = -6
air.velocity = -4,-6
airguard.velocity = -4,-4.5
air.fall = 1

[State 1075, 7] ;Change state when KFM is close to ground
type = ChangeState
trigger1 = Vel Y > 0 && Pos Y >= -5
value = 1056


;---------------------------------------------------------------------------
; Light Kung Fu Upper
; Difficulté CNS : easy
; Description: This is a simple special attack that can hit twice. Notice
;     the use of the Width controller to keep opponents from getting too
;     close to KFM during his uppercut (press Ctrl-C, and look at the
;     yellow bar at KFM's feet during the move).
;     The second HitDef has some interesting parameters. fall.recovertime
;     is used to prevent the opponent (p2) from recovering immediately
;     after being hit (eg. press x+y with KFM to recover). This gives the
;     attacking KFM a chance to follow up with an extra attack, such as
;     a Kung Fu Knee. The yaccel parameter, set at 0.4, makes p2 fall at a
;     greater value of acceleration than the default, which is 0.35.
[Statedef 1100]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 110
velset = 0,0
anim = 1100
ctrl = 0
sprpriority = 2

[State 1100, Width]
type = Width
trigger1 = AnimElemTime(4) >= 0 && AnimElemTime(13) < 0
value = 5,0

[State 1100, 1]
type = PlaySnd
trigger1 = AnimElem = 4
value = 0, 2

[State 1100, 2]
type = HitDef
trigger1 = Time = 0
attr = S, SA
animtype  = Med
damage    = 52, 4
priority  = 5
guardflag = MA
pausetime = 4,8
sparkxy = 0,-48
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -3
guard.velocity = -6
air.velocity = -2,-2
airguard.velocity = -4,-4.5
p2facing = 1

[State 1100, 3]
type = HitDef
trigger1 = AnimElem = 7
attr = S, SA
animtype  = Up
damage    = 55, 4
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = 0,-110
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -1,-9.5
guard.velocity = -6
air.velocity = -1,-7.5
airguard.velocity = -4,-4.5
p2facing = 1
fall = 1                   ;Make p2 fall down
fall.recovertime = 40      ;40 ticks before p2 can recover from fall
yaccel = .4                ;p2 will accelerate down at .4 pixels/sec^2 when falling

[State 1100, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Strong Kung Fu Upper
[Statedef 1110]
type    = S
movetype= A
physics = S
juggle  = 4
poweradd= 120
velset = 0,0
anim = 1110
ctrl = 0
sprpriority = 2

[State 1110, Width]
type = Width
trigger1 = AnimElemTime(4) >= 0 && AnimElemTime(14) < 0
value = 5,0

[State 1110, 1]
type = PlaySnd
trigger1 = AnimElem = 4
value = 0, 2

[State 1110, 2]
type = HitDef
trigger1 = Time = 0
attr = S, SA
animtype  = Med
damage    = 57, 4
priority  = 5
guardflag = MA
pausetime = 4,8
sparkxy = 0,-48
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -3
guard.velocity = -6
air.velocity = -2,-2
airguard.velocity = -4,-4.5
p2facing = 1

[State 1110, 3]
type = HitDef
trigger1 = AnimElem = 7
attr = S, SA
animtype  = Up
damage    = 60, 4
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = 0,-110
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 15
ground.hittime  = 18
ground.velocity = -1,-10.5
guard.velocity = -6
air.velocity = -1,-8.5
airguard.velocity = -4,-4.5
p2facing = 1
fall = 1
fall.recovertime = 50
yaccel = .4

[State 1110, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Fast Kung Fu Upper
[Statedef 1120]
type    = S
movetype= A
physics = S
juggle  = 6
poweradd= IfElse((var(55) = 1),0,-330)
velset = 0,0
anim = 1120
ctrl = 0
sprpriority = 2

[State 1120, InvincibleInCounter] ; NEW FOR KFM MASTER
type = NotHitBy
trigger1 = var(55) = 1
value = SCA

[State 1120, Pal] ; NEW FOR KFM MASTER
type = PalFX
trigger1 = Time = 0
trigger1 = var(55) = 1
color = 0
invertall = 1
add = -35,0,185
time = 5

[State 1120, Width]
type = Width
trigger1 = AnimElemTime(4) >= 0 && AnimElemTime(14) < 0
value = 5,0

[State 1120, Afterimage]
type = AfterImage
trigger1 = Time = 0
length = 13
PalBright   =  30, 30,  0
PalContrast =  70, 70, 20
PalAdd      = -10,-10,-10
PalMul      = .85,.85,.50
TimeGap  = 1
FrameGap = 2
Trans = Add
time = 2

[State 1120, Afterimage]
type = AfterImageTime
trigger1 = AnimTime < -2
time = 2

[State 1120, Blink Yellow]
type = PalFX
trigger1 = Time = 0 && var(55) = 0
trigger2 = Time = 5 && var(55) = 1
time = 20
add = 32,16,0
sinadd = 64,32,5,3

[State 1120, 1]
type = PlaySnd
trigger1 = AnimElem = 4
value = 0, 2

[State 1120, 2]
type = HitDef
trigger1 = Time = 0
trigger2 = AnimElem = 4
attr = S, SA
animtype  = Med
damage    = 30, 4
getpower  = 0
priority  = 5
guardflag = MA
pausetime = 6,10
sparkxy = 0, ifelse(Time = 0, -48, -55)
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 21
ground.velocity = -3
guard.velocity = -6
air.velocity = -2,-2
airguard.velocity = -4,-4.5
p2facing = 1

[State 1120, 3]
type = HitDef
trigger1 = AnimElem = 7
attr = S, SA
animtype  = Up
damage    = 68, 4
getpower  = 0
priority  = 5
guardflag = MA
pausetime = 12,12
sparkxy = 0,-110
hitsound   = 5,2
guardsound = 6,0
ground.type = Low
ground.slidetime = 18
ground.hittime  = 21
ground.velocity = -1.2,-11
guard.velocity = -6
air.velocity = -1.2,-9
airguard.velocity = -4,-4.5
p2facing = 1
fall = 1
fall.recovertime = 60
yaccel = .4

[State 1120, VarInit] ; NEW FOR KFM MASTER
type = VarSet
trigger1 = AnimTime = -1
trigger1 = var(55) = 1
var(55) = 0

[State 1120, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;---------------------------------------------------------------------------
; Triple Kung Fu Palm (hyper)
; Difficulté CNS : medium
; Notes: Notice that the HitDefs in supers have "getpower = 0". This makes
;        sure KFM doesn't recharge his super guage as he hits.
;        Also, the attributes for the HitDefs is "HA" for "hyper attack",
;        ie. "attr = S, HA".
;        Notice how the first HitDef is reused twice by allowing it to
;        trigger on two animation elements.
[Statedef 3000]
type    = S
movetype= A
physics = S
juggle  = 4
velset = 0,0
anim = 3000
ctrl = 0
sprpriority = 2

[State 3000, Width]
type = Width
trigger1 = AnimElem = 2, >= 0
value = 15,0

[State 3000, Super A]
type = SuperPause
trigger1 = AnimElem = 2, 1
pos = 25, -57
anim = 100
sound = 20, 0
poweradd = -1000

[State 3000, Super B]
type = AfterImage
trigger1 = AnimElem = 2, 1
time = 2

[State 3000, Super C]
type = AfterImageTime
trigger1 = AnimElemTime(2) >= 1 && Time < 60
time = 2

[State 3000, Super D]
type = NotHitBy
trigger1 = AnimElem = 2
value = , NA, SA, AT
time = 12

[State 3000, Super E]
type = NotHitBy
trigger1 = AnimElemTime(2) >= 0 && Time < 30
value2 = C, NA
time = 1

[State 3000, 1]
type = PlaySnd
trigger1 = AnimElem = 4
trigger2 = AnimElem = 11
trigger3 = AnimElem = 18
value = 0, 3

[State 3000, 2]
type = PosAdd
trigger1 = AnimElem = 2
x = 20

[State 3000, 3]
type = PosAdd
trigger1 = AnimElem = 3
trigger2 = AnimElem = 10
trigger3 = AnimElem = 12
trigger4 = AnimElem = 17
trigger5 = AnimElem = 19
trigger4 = AnimElem = 29
x = 10

[State 3000, 4]
type = VelSet
trigger1 = AnimElem = 5
trigger2 = AnimElem = 12
trigger3 = AnimElem = 19
x = 6

[State 3000, 4]
type = PosAdd
trigger1 = AnimElem = 5
x = 5

[State 3000, 5]
type = HitDef
trigger1 = AnimElem = 5
trigger2 = AnimElem = 12
attr = S, HA
animtype  = Hard
damage    = 72,4
getpower  = 0
priority  = 6
guardflag = MA
pausetime = 15,15
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 30
ground.hittime  = 30
ground.velocity = -6
air.velocity = -3,-3
air.fall = 1
fall.animtype = Hard
fall.recover = 0

[State 3000, 6]
type = HitDef
trigger1 = AnimElem = 19
attr = S, HA
animtype  = Hard
damage    = 75,4
getpower  = 0
priority  = 6
guardflag = MA
pausetime = 15,15
sparkxy = -10,-60
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 40
ground.hittime  = 40
ground.velocity = -5, -4
guard.velocity = -12
air.velocity = -5,-4
airguard.velocity = -3,-3
fall.animtype = Hard
fall = 1
fall.recover = 0

[State 3000, 7]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;---------------------------------------------------------------------------
; Smash Kung Fu Upper (hyper)
; Difficulté CNS : medium
; Description: This is very similar to KFM's Strong and Light Kung Fu Uppers.
;     There is just one HitDef, for a screen-shaking hit. The envshake
;     parameters are used to make this effect. You can find out more about
;     each parameter in the CNS documentation.
;     The fall.recover parameter is set at 0, meaning that p2 cannot recover
;     from the fall by entering his recovery command (for KFM, that is x+y).
;     This gives the attacking KFM a chance to follow up with another attack,
;     such as the Fast Kung Fu Palm.
;     Note that there is a ChangeState controller used to make KFM change to
;     a success state if he hits. The success state has KFM hold his arm
;     up longer for a dramatic effect.
[Statedef 3050]
type    = S
movetype= A
physics = S
juggle  = 4
velset = 0,0
anim = 3050
ctrl = 0
sprpriority = 2

[State 3050, Width]
type = Width
trigger1 = AnimElemTime(4) >= 0 && AnimElemTime(16) < 0
value = 5,0

[State 3050, Super A]
type = SuperPause
trigger1 = AnimElem = 2
pos = -5, -55
anim = 100
sound = 20, 0
poweradd = -1000

[State 3050, Super B]
type = AfterImage
trigger1 = AnimElem = 2
time = 2

[State 3050, Super C]
type = AfterImageTime
trigger1 = AnimElemTime(2) >= 0
time = 2

[State 3050, Super D]
type = NotHitBy
trigger1 = AnimElem = 2
value = , NA, SA, AT
time = 6

[State 3050, 1]
type = PlaySnd
trigger1 = AnimElem = 4
value = 0, 2

[State 3050, 2]
type = HitDef
trigger1 = Time = 0
attr = S, HA
animtype  = Up               ;Make p2 use "Up" type animation on hit
damage    = 155, 12
getpower  = 0
priority  = 5
guardflag = MA
pausetime = 30,30
sparkno = 3
sparkxy = 0,-110
hitsound   = 5,4
guardsound = 6,0
ground.type = Low
ground.slidetime = 30
ground.hittime  = 30
ground.velocity = -1.3,-25
guard.velocity = -11
air.velocity = -1.3,-25
airguard.velocity = -4.5,-5
envshake.time = 25           ;Parameters for shaking the screen on hit
envshake.ampl = 7
envshake.freq = 176
p2facing = 1                 ;Force p2 to face p1 on hit
fall = 1
fall.recover = 0             ;Prevent p2 from recovering
fall.damage = 70             ;p2 will take 70 damage on hitting the ground
fall.envshake.ampl = 6       ;Parameters for shaking the screen on fall
fall.envshake.freq = 178
fall.envshake.time = 15
mindist = 50,-100            ;Keep p2 a minimum of 50 pixels away from p1, and no higher than 100 pixels up
maxdist = 100,-10            ;Keep p2 a maximum of 100 pixels away from p1, and no lower than 10 pixels below
yaccel = .8                  ;Accelerate p2 downwards rapidly

;This controller below makes Kung Fu man change to a success state if he
;successfully hits the Smash Kung Fu Upper.
[State 3050, 4]
type = ChangeState
trigger1 = MoveHit
value = 3051

[State 3050, 5]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1

;------------------
; Smash Kung Fu Upper (success)
; Description: This is the state that KFM changes to if he successfully hits
;     with Smash Kung Fu Upper. KFM holds his arm high for a short while
;     longer, then changes back to his idle stand state.
[Statedef 3051]
type    = S
movetype= A
physics = S
anim = 3051

[State 3051, 1]
type = AfterImageTime
trigger1 = AnimTime < -2
time = 2

[State 3051, 2]
type = ChangeState
trigger1 = AnimTime = 0
value = 0
ctrl = 1


;---------------------------------------------------------------------------
; Override common states (use same number to override) :
;---------------------------------------------------------------------------

;---------------------------------------------------------------------------
; States that are always executed (use statedef -2)
;---------------------------------------------------------------------------

[Statedef -2]

;===========================================================================
; Assignations de variables. *NEW*
;===========================================================================

[State -2, CommandP2]
type = VarAdd
triggerall = P2stateno = [28200,28250]
trigger1 = Enemy,command = "a"
trigger2 = Enemy,command = "b"
trigger3 = Enemy,command = "c"
trigger4 = Enemy,command = "x"
trigger5 = Enemy,command = "y"
trigger6 = Enemy,command = "z"
var(52) = 1

	;--[Explications]
	; Lorsque P2 sera placé dans notre CNS via le drain, on va compter
	; le nombre de fois où le joueur adverse appuie sur les touches.
	;--[End]--

[State -2, InitCommandP2]
type = VarSet
trigger1 = var(52) != 0
trigger1 = P2StateNo != [28200,28250]
var(52) = 0

	;--[Explications]
	; Quand P2 est hors du drain et si la variable 52 est différente de
	; zéro, on la réinitialise pour un prochain drain.
	;--[End]--

[State -2, WCVelXP2]
type = VarSet
trigger1 = 1
fvar(0) = IfElse((P2Dist X > 65),(P2Dist X-65)/20.0, 0)


;===========================================================================
; Debug Mode *NEW*
;===========================================================================

[State -2, Info]
type = DisplayToClipboard
trigger1 = 1
text = "P1 = %d - P2Dist = %d - P2Pos = %d - Vie max = %d - Vie = %d\n"
params = Floor(Pos X), Floor(P2Dist X), Floor(Enemy, Pos X), Const(data.life), Life

	;--[Explications]
	; Affichage des variables dans le mode Debug. Le "\n" en fin de ligne
	; du paramètre "text" permet de sauter une ligne, pour que le VelInfo
	; (voir après) n'apparaisse pas sur la même ligne.
	;--[End]

[State -2, VelInfo]
type = Null;AppendToClipboard
trigger1 = 1
text = "Vel Y = %f - Vel X = %f - Var(52) = %d"
params = Vel Y, Vel X, var(52)

	;--[Explications]
	; Affichage de la vitesse du personnage à chaque tick. On utilise la
	; fonction "AppendToClipboard" et non "DisplayToClipboard" pour que
	; le texte soit affiché à la suite des infos du state -2 "Info". Si
	; on utilisait DisplayToClipboard, les données théoriquement 
	; affichées par le state -2 "Info" seraient remplacées par celles
	; affichées par le state -2 "VelInfo".
	;--[End]

[State -2, VelInfo]
type = Null ;AppendToClipboard
trigger1 = 1
text = "HelperWood = %d, HelperNinja = %d, var(50) = %d"
params = NumHelper(29100), NumHelper(29200), var(50)

[State -2, VelInfo]
type = Null ;AppendToClipboard
trigger1 = 1
text = "P2ScreenPos X  = %d"
params = Floor(Enemy, ScreenPos X)

[State -2, VelInfo]
type = AppendToClipboard
trigger1 = 1
text = "Vel X = %f"
params = Vel X

[State -2, VelP2]
type = Null ;AppendToClipboard
trigger1 = 1
text = "P2 X = %d Y = %d - P2Dist X = %d P2Dist Y = %d"
params = Floor(Enemy, Pos X), Floor(Enemy, Pos Y), Floor(P2Dist X), Floor(P2Dist Y)

[State -2, Info]
type = Null ;AppendToClipboard
trigger1 = 1
;text = "TriggerWCAir = %d"
;params = Floor((P2Dist Y)-(Enemy, Const(size.height)))
text = "P2Dist Y = %d - P2Height = %d - TriggerWCAir = %d"
params = Floor(P2Dist Y), (Enemy, Const(size.height)), Floor((P2Dist Y)-(Enemy, Const(size.height)))

;===========================================================================
; Sacrifice. *NEW*
;===========================================================================


[State -2]
type = PowerAdd
trigger1 = var(56) = 1
value = -100

	;--[Explications]
	; Réduction du power si le Sacrifice est utilisé.
	;--[End]

[State -2]
type = LifeAdd
trigger1 = var(56) = 1
value = IfElse(((Life+10)>(Const(data.life)-1)),((Const(data.life)-1)-Life),10)

	;--[Explications]
	; Ajout de 10 à la vie si le Sacrifice est activé.
	; Si l'ajout de 10 rend la vie supérieure au niveau de départ (max),
	; on ramène l'ajout à la différence entre la vie max et le niveau
	; actuel (la vie revient exactement au niveau maximum), sinon, on
	; ajoute 10, normalement.
	;
	; On enlève 1 à chaque référence à Const(data.life), la vie maximale
	; théorique, car en jeu, la vie de départ du perso est : 
	; Const(data.life) - 1. 
	;--[End]

[State -2]
type = VarSet
trigger1 = Power < 100
trigger2 = Life = (Const(data.life)-1)
var(56) = 0

	;--[Explications]
	; On arrête le Sacrifice 1) si le power est insuffisant, ou
	; 2) si la vie est revenue à son niveau maximal.
	;--[End]

;===========================================================================
; AUTO STOP SOUNDS
;===========================================================================

; On se sert de ces states -2 pour couper les sons qui sont joués en boucle
; dans certains states quand KFMM est sorti de ces states d'une autre manière
; que par un ChangeState prévu dans les states en question.
;
; Si on ne les utilises pas, les sons (en boucle) sont joués indéfiniment,
; même si KFMM n'est plus dans les states correspondants.
;
; Concrètement, ils vont s'appliquer notamment quand KFMM est touché pendant
; ces stages (Power Charge, par exemple).

[State -2]
type = StopSnd
trigger1 = var(57) = 1
trigger1 = StateNo != 23000
trigger1 = StateNo != 28150
channel = 3

	;--[Explications]
	; On n'utilise qu'un seul state pour tous les cas recensés car dans
	; tous ces cas, on a utilisé le même channel, le 3.
	;--[End]

[State -2]
type = VarSet
trigger1 = var(57) = 1
trigger1 = StateNo != 23000
trigger1 = StateNo != 28150
var(57) = 0

	;--[Explications]
	; Vu que le son est coupé, on réinitialise la variable à 0.
	;--[End]

;===========================================================================
; KUNG FU DISPLAY. *NEW*
;===========================================================================


;---------------------------------------------------------------------------
; States that are executed when in self's state file (use statedef -3)
;---------------------------------------------------------------------------

[Statedef -3]

;This controller plays a sound everytime KFM lands from a jump, or
;from his back-dash.
[State -3, Landing Sound]
type = PlaySnd
triggerall = Time = 1
trigger1 = stateno = 52 ;Jump land
trigger2 = stateno = 106 ;Run-back land
value = 40, 0
